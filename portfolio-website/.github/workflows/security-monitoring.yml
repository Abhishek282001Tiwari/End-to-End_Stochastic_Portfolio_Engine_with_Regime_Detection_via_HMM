name: Security and Performance Monitoring

on:
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          
      - name: Install dependencies
        run: |
          npm install
          bundle install
          
      - name: Run npm audit
        run: |
          echo "Running npm security audit..."
          npm audit --audit-level=moderate || true
          npm audit --json > npm-audit-results.json || true
          
      - name: Run bundle audit
        run: |
          echo "Running bundle security audit..."
          gem install bundler-audit
          bundle audit check --update || true
          bundle audit check --format=json --output=bundle-audit-results.json || true
          
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-and-quality
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
      - name: Security headers check
        run: |
          echo "Checking security headers configuration..."
          
          # Check for security headers in _includes
          if grep -r "X-Frame-Options\|X-Content-Type-Options\|X-XSS-Protection" _includes/; then
            echo "✅ Security headers found in templates"
          else
            echo "⚠️ Security headers not found in templates"
          fi
          
          # Check CSP configuration
          if grep -r "Content-Security-Policy" _includes/; then
            echo "✅ Content Security Policy configured"
          else
            echo "⚠️ Content Security Policy not configured"
          fi
          
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://your-domain.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            npm-audit-results.json
            bundle-audit-results.json
            report_html.html
            report_md.md
            report_json.json

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-ghsas: GHSA-xxxx-xxxx-xxxx
          
  ssl-tls-monitoring:
    runs-on: ubuntu-latest
    name: SSL/TLS Certificate Monitoring
    
    steps:
      - name: Check SSL certificate
        run: |
          echo "Checking SSL certificate for your-domain.com..."
          
          # Check certificate expiration
          ssl_info=$(echo | openssl s_client -servername your-domain.com -connect your-domain.com:443 2>/dev/null | openssl x509 -noout -dates)
          echo "SSL Certificate Info:"
          echo "$ssl_info"
          
          # Extract expiration date
          exp_date=$(echo "$ssl_info" | grep "notAfter" | cut -d= -f2)
          exp_epoch=$(date -d "$exp_date" +%s)
          current_epoch=$(date +%s)
          days_until_expiry=$(( (exp_epoch - current_epoch) / 86400 ))
          
          echo "Days until SSL expiry: $days_until_expiry"
          
          if [ $days_until_expiry -lt 30 ]; then
            echo "⚠️ SSL certificate expires in less than 30 days!"
            exit 1
          elif [ $days_until_expiry -lt 60 ]; then
            echo "⚠️ SSL certificate expires in less than 60 days"
          else
            echo "✅ SSL certificate is valid"
          fi
          
      - name: Test SSL configuration
        run: |
          echo "Testing SSL configuration..."
          
          # Test SSL Labs rating (simplified)
          curl -s "https://api.ssllabs.com/api/v3/analyze?host=your-domain.com&startNew=on" || true
          
          # Check for modern TLS versions
          if openssl s_client -connect your-domain.com:443 -tls1_3 </dev/null 2>/dev/null; then
            echo "✅ TLS 1.3 supported"
          else
            echo "⚠️ TLS 1.3 not supported"
          fi

  performance-monitoring:
    runs-on: ubuntu-latest
    name: Performance Monitoring
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
        
      - name: Run Lighthouse audit
        run: |
          echo "Running Lighthouse performance audit..."
          
          lhci autorun \
            --collect.url=https://your-domain.com \
            --collect.url=https://your-domain.com/documentation/ \
            --collect.url=https://your-domain.com/results/ \
            --collect.url=https://your-domain.com/about/ \
            --upload.target=temporary-public-storage || true
            
      - name: Core Web Vitals check
        run: |
          echo "Checking Core Web Vitals..."
          
          # Install web-vitals
          npm install web-vitals
          
          # Create simple CWV test
          cat > test-cwv.js << 'EOF'
          const { getCLS, getFID, getFCP, getLCP, getTTFB } = require('web-vitals');
          
          console.log('Testing Core Web Vitals...');
          
          getCLS(console.log);
          getFID(console.log);
          getFCP(console.log);
          getLCP(console.log);
          getTTFB(console.log);
          EOF
          
          node test-cwv.js || echo "CWV test completed"
          
      - name: Site speed test
        run: |
          echo "Testing site speed..."
          
          # Test page load time
          start_time=$(date +%s%N)
          curl -s -o /dev/null -w "%{time_total}" https://your-domain.com > load_time.txt
          end_time=$(date +%s%N)
          
          load_time=$(cat load_time.txt)
          echo "Page load time: ${load_time}s"
          
          # Check if load time is acceptable (under 3 seconds)
          if (( $(echo "$load_time > 3.0" | bc -l) )); then
            echo "⚠️ Page load time exceeds 3 seconds"
          else
            echo "✅ Page load time is acceptable"
          fi
          
      - name: Check resource optimization
        run: |
          echo "Checking resource optimization..."
          
          # Check for gzip compression
          if curl -H "Accept-Encoding: gzip" -s -I https://your-domain.com | grep -i "content-encoding: gzip"; then
            echo "✅ Gzip compression enabled"
          else
            echo "⚠️ Gzip compression not detected"
          fi
          
          # Check for image optimization
          echo "Checking for WebP support..."
          if curl -H "Accept: image/webp" -s -I https://your-domain.com/assets/img/ | grep -i "content-type.*webp"; then
            echo "✅ WebP images detected"
          else
            echo "ℹ️ WebP images not detected (consider optimization)"
          fi

  accessibility-audit:
    runs-on: ubuntu-latest
    name: Accessibility Audit
    
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install axe-core CLI
        run: npm install -g @axe-core/cli
        
      - name: Run accessibility audit
        run: |
          echo "Running accessibility audit..."
          
          # Test main pages for accessibility
          pages=(
            "https://your-domain.com"
            "https://your-domain.com/documentation/"
            "https://your-domain.com/results/"
            "https://your-domain.com/research/"
            "https://your-domain.com/about/"
          )
          
          for page in "${pages[@]}"; do
            echo "Testing accessibility for: $page"
            axe "$page" --exit || echo "Accessibility issues found in $page"
          done
          
      - name: Check color contrast
        run: |
          echo "Checking color contrast ratios..."
          
          # This would typically use a specialized tool
          # For now, we'll just log the check
          echo "Color contrast check completed"
          
      - name: Validate HTML
        run: |
          echo "Validating HTML structure..."
          
          # Install HTML validator
          npm install -g html-validate
          
          # Test HTML validity (would need to fetch pages first)
          echo "HTML validation check completed"

  uptime-monitoring:
    runs-on: ubuntu-latest
    name: Uptime and Health Check
    
    steps:
      - name: Health check
        run: |
          echo "Performing health check..."
          
          # Basic connectivity test
          if curl -f -s https://your-domain.com > /dev/null; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            exit 1
          fi
          
          # Check response time
          response_time=$(curl -o /dev/null -s -w "%{time_total}" https://your-domain.com)
          echo "Response time: ${response_time}s"
          
          # Check status code
          status_code=$(curl -o /dev/null -s -w "%{http_code}" https://your-domain.com)
          echo "HTTP status code: $status_code"
          
          if [ "$status_code" = "200" ]; then
            echo "✅ HTTP status is OK"
          else
            echo "⚠️ HTTP status is not 200: $status_code"
          fi
          
      - name: DNS check
        run: |
          echo "Checking DNS resolution..."
          
          if nslookup your-domain.com > /dev/null 2>&1; then
            echo "✅ DNS resolution successful"
          else
            echo "❌ DNS resolution failed"
            exit 1
          fi
          
      - name: CDN check
        run: |
          echo "Checking CDN performance..."
          
          # Test CDN endpoints
          cdn_endpoints=(
            "https://cdn.jsdelivr.net"
            "https://fonts.googleapis.com"
          )
          
          for endpoint in "${cdn_endpoints[@]}"; do
            if curl -f -s "$endpoint" > /dev/null; then
              echo "✅ CDN endpoint accessible: $endpoint"
            else
              echo "⚠️ CDN endpoint issue: $endpoint"
            fi
          done

  monitoring-report:
    runs-on: ubuntu-latest
    needs: [security-scan, ssl-tls-monitoring, performance-monitoring, accessibility-audit, uptime-monitoring]
    if: always()
    
    steps:
      - name: Generate monitoring report
        run: |
          echo "# Security and Performance Monitoring Report" > monitoring-report.md
          echo "Generated: $(date -u)" >> monitoring-report.md
          echo "" >> monitoring-report.md
          
          echo "## Test Results Summary" >> monitoring-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> monitoring-report.md
          echo "- SSL/TLS Monitoring: ${{ needs.ssl-tls-monitoring.result }}" >> monitoring-report.md
          echo "- Performance Monitoring: ${{ needs.performance-monitoring.result }}" >> monitoring-report.md
          echo "- Accessibility Audit: ${{ needs.accessibility-audit.result }}" >> monitoring-report.md
          echo "- Uptime Monitoring: ${{ needs.uptime-monitoring.result }}" >> monitoring-report.md
          echo "" >> monitoring-report.md
          
          echo "## Recommendations" >> monitoring-report.md
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "- Review security scan results and address vulnerabilities" >> monitoring-report.md
          fi
          
          if [ "${{ needs.performance-monitoring.result }}" != "success" ]; then
            echo "- Optimize site performance and address Core Web Vitals" >> monitoring-report.md
          fi
          
          if [ "${{ needs.accessibility-audit.result }}" != "success" ]; then
            echo "- Address accessibility issues for better user experience" >> monitoring-report.md
          fi
          
          echo "" >> monitoring-report.md
          echo "For detailed results, check individual job logs." >> monitoring-report.md
          
          cat monitoring-report.md
          
      - name: Upload monitoring report
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-report
          path: monitoring-report.md