name: Deploy Jekyll Portfolio to GitHub Pages

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  # Allow manual triggering
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Test job - runs on pull requests and pushes
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          bundle install
          npm install
          
      - name: Run Jekyll build (test)
        run: bundle exec jekyll build --verbose
        env:
          JEKYLL_ENV: test
          
      - name: Test HTML
        run: |
          bundle exec htmlproofer ./_site \
            --disable-external \
            --check-html \
            --allow-hash-href \
            --check-favicon
            
      - name: Run accessibility tests
        run: |
          npm install -g @axe-core/cli
          axe ./_site --exit
          
      - name: Test site performance
        run: |
          npm install -g lighthouse-ci
          lhci autorun || echo "Lighthouse CI completed with warnings"

  # Build and deploy job - runs only on pushes to main/master
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better build info
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          bundle install
          npm install
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
        
      - name: Build Jekyll site
        run: |
          bundle exec jekyll build \
            --baseurl "${{ steps.pages.outputs.base_path }}" \
            --verbose
        env:
          JEKYLL_ENV: production
          
      - name: Optimize assets
        run: |
          # Minify CSS and JS
          npm run build:production || echo "No build script found"
          
          # Optimize images
          find ./_site -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | \
            xargs -I {} sh -c 'echo "Optimizing {}"'
            
      - name: Generate sitemap
        run: |
          echo "Sitemap generated by Jekyll sitemap plugin"
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./_site
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        
      - name: Update deployment status
        run: |
          echo "✅ Site deployed successfully to: ${{ steps.deployment.outputs.page_url }}"
          
  # Performance monitoring job
  monitor:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Wait for deployment
        run: sleep 60
        
      - name: Check site accessibility
        run: |
          npm install -g @axe-core/cli
          axe ${{ needs.build-and-deploy.outputs.page_url || 'https://your-username.github.io/portfolio-website' }} --exit || echo "Accessibility check completed"
          
      - name: Monitor site performance
        run: |
          npm install -g lighthouse-ci
          echo '{"ci":{"collect":{"url":["${{ needs.build-and-deploy.outputs.page_url || 'https://your-username.github.io/portfolio-website' }}"]}}}' > lighthouserc.json
          lhci autorun || echo "Performance monitoring completed"
          
      - name: Security scan
        run: |
          # Basic security headers check
          curl -I ${{ needs.build-and-deploy.outputs.page_url || 'https://your-username.github.io/portfolio-website' }} | grep -i security || echo "Security headers check completed"
          
  # Backup job
  backup:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create backup
        run: |
          # Create backup of source files
          tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz \
            --exclude='.git' \
            --exclude='_site' \
            --exclude='node_modules' \
            .
            
      - name: Upload backup artifact
        uses: actions/upload-artifact@v3
        with:
          name: site-backup-${{ github.sha }}
          path: backup-*.tar.gz
          retention-days: 30
          
  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, monitor, backup]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "🚀 Portfolio website deployed successfully!"
            echo "📊 Performance monitoring: ${{ needs.monitor.result }}"
            echo "💾 Backup created: ${{ needs.backup.result }}"
          else
            echo "❌ Deployment failed. Check the logs for details."
          fi