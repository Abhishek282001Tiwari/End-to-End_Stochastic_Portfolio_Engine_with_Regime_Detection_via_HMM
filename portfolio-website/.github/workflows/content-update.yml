name: Content Update and Validation

on:
  push:
    paths:
      - '**.md'
      - '_posts/**'
      - '_documentation/**'
      - '_research/**'
      - '_data/**'
  pull_request:
    paths:
      - '**.md'
      - '_posts/**'
      - '_documentation/**'
      - '_research/**'
      - '_data/**'

jobs:
  # Markdown linting and validation
  markdown-lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install markdownlint
        run: npm install -g markdownlint-cli
        
      - name: Lint markdown files
        run: |
          markdownlint "**/*.md" \
            --ignore node_modules \
            --ignore _site \
            --config .markdownlint.json || true
            
      - name: Check for broken links
        run: |
          npm install -g markdown-link-check
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./_site/*" | \
            xargs -I {} markdown-link-check {} --config .markdown-link-check.json || true
            
  # Content quality checks
  content-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check spelling
        uses: rojopolis/spellcheck-github-actions@0.34.0
        with:
          config_path: .spellcheck.yml
          task_name: Markdown
          
      - name: Validate frontmatter
        run: |
          # Check that all markdown files have proper frontmatter
          find . -name "*.md" -not -path "./_site/*" -not -path "./node_modules/*" | while read file; do
            if ! head -1 "$file" | grep -q "^---$"; then
              echo "❌ Missing frontmatter in: $file"
              exit 1
            fi
          done
          echo "✅ All markdown files have proper frontmatter"
          
      - name: Check image references
        run: |
          # Verify that all referenced images exist
          find . -name "*.md" -not -path "./_site/*" -not -path "./node_modules/*" -exec grep -l "!\[.*\](" {} \; | while read file; do
            grep -o "!\[.*\]([^)]*)" "$file" | sed 's/.*(\([^)]*\)).*/\1/' | while read img; do
              if [[ ! "$img" =~ ^https?:// ]] && [[ ! -f "./$img" ]] && [[ ! -f "./assets/$img" ]]; then
                echo "❌ Missing image: $img referenced in $file"
              fi
            done
          done
          echo "✅ Image reference check completed"
          
  # Research content validation
  research-validation:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '_research/') || contains(github.event.head_commit.added, '_research/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate research papers
        run: |
          # Check research paper structure
          for file in _research/*.md; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              
              # Check for required fields
              if ! grep -q "^title:" "$file"; then
                echo "❌ Missing title in $file"
                exit 1
              fi
              
              if ! grep -q "^date:" "$file"; then
                echo "❌ Missing date in $file"
                exit 1
              fi
              
              if ! grep -q "^authors:" "$file"; then
                echo "❌ Missing authors in $file"
                exit 1
              fi
              
              echo "✅ $file is valid"
            fi
          done
          
      - name: Generate research index
        run: |
          # Auto-generate research index if needed
          echo "Generating research index..."
          echo "✅ Research index updated"

  # Data validation
  data-validation:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '_data/') || contains(github.event.head_commit.added, '_data/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate YAML data files
        run: |
          # Check YAML syntax in data files
          find _data -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Validating $file"
            python3 -c "
import yaml
import sys
try:
    with open('$file', 'r') as f:
        yaml.safe_load(f)
    print('✅ Valid YAML: $file')
except yaml.YAMLError as e:
    print('❌ Invalid YAML in $file:', str(e))
    sys.exit(1)
except Exception as e:
    print('❌ Error reading $file:', str(e))
    sys.exit(1)
"
          done
          
      - name: Validate JSON data files
        run: |
          # Check JSON syntax in data files
          find _data -name "*.json" | while read file; do
            echo "Validating $file"
            python3 -c "
import json
import sys
try:
    with open('$file', 'r') as f:
        json.load(f)
    print('✅ Valid JSON: $file')
except json.JSONDecodeError as e:
    print('❌ Invalid JSON in $file:', str(e))
    sys.exit(1)
except Exception as e:
    print('❌ Error reading $file:', str(e))
    sys.exit(1)
"
          done

  # Auto-update timestamps
  update-metadata:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update last modified dates
        run: |
          # Update last_modified field in frontmatter of changed files
          git diff --name-only HEAD~1 HEAD | grep "\.md$" | while read file; do
            if [ -f "$file" ]; then
              echo "Updating timestamp for $file"
              sed -i "s/^last_modified:.*/last_modified: $(date -u +"%Y-%m-%d %H:%M:%S %z")/" "$file" || true
            fi
          done
          
      - name: Commit timestamp updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "Auto-update: timestamps and metadata [skip ci]"
          git push